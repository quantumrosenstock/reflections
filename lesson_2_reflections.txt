What happens when you initialize a repository? Why do you need to do it?

  Initialising a git repository creates a .git file that manages the history of the different versions that would be committed. Initialising a repository is necessary for the same reason.

How is the staging area different from the working directory and the repository? What value do you think it offers?

  The staging area contains the files that are ready to be committed in the next commit. These files would be added to the git repository from the working directory. It helps consolidate all the files in the particular logical update that is being made to the repository.

How can you use the staging area to make sure you have one commit per logical change?

  The staging area collects all the files that have been added after modification, this allows these files that are part of the same logical change to be committed together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

  -When you are trying to add something new and experimental to already working code and want to be able to run the earlier version simultaneously while also working on the newer one.
  -While collaborating with others and different people want to work on different aspects of the code

How do the diagrams help you visualize the branch structure?

  The diagrams help us understand which commits are accessible from which branch and therefore help us understand the history of different branches and commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  The result of merging two branches together is that the branch that is currently checked-out will remain and the other one will be removed, but all the commits from both branches will be preserved. These commits will be arranged according to their timestamp.
  It is represented in the diagram with a node that connects to both the previous branches because it can reach all the commits of those two branches and becomes a single branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  Pros - Automatic merging is clearly easier and would be better if the code is too long or hard to read through and merge manually.
  Cons - Merging may often do something that is incorrect or not required: it might not realise that two versions may be the same thing or nearly the same with one parameter changed. The sequence of different parts of code in different versions might get messed up.
